(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/sort'), require('@angular/cdk/a11y'), require('@angular/cdk/drag-drop'), require('@angular/material/dialog'), require('rxjs/operators'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/core'), require('@angular/material/divider'), require('@angular/material/menu'), require('@angular/material/icon'), require('@angular/material/tooltip'), require('@angular/forms'), require('rxjs'), require('@angular/cdk/collections')) :
    typeof define === 'function' && define.amd ? define('ngx-mat-multi-sort', ['exports', '@angular/core', '@angular/material/sort', '@angular/cdk/a11y', '@angular/cdk/drag-drop', '@angular/material/dialog', 'rxjs/operators', '@angular/common', '@angular/material/button', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/core', '@angular/material/divider', '@angular/material/menu', '@angular/material/icon', '@angular/material/tooltip', '@angular/forms', 'rxjs', '@angular/cdk/collections'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-mat-multi-sort'] = {}, global.ng.core, global.ng.material.sort, global.ng.cdk.a11y, global.ng.cdk.dragDrop, global.ng.material.dialog, global.rxjs.operators, global.ng.common, global.ng.material.button, global.ng.material.checkbox, global.ng.material.chips, global.ng.material.core, global.ng.material.divider, global.ng.material.menu, global.ng.material.icon, global.ng.material.tooltip, global.ng.forms, global.rxjs, global.ng.cdk.collections));
}(this, (function (exports, core, sort, a11y, dragDrop, dialog, operators, common, button, checkbox, chips, core$1, divider, menu, icon, tooltip, forms, rxjs, collections) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var MatMultiSort = /** @class */ (function (_super) {
        __extends(MatMultiSort, _super);
        function MatMultiSort() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.start = 'asc';
            _this.actives = [];
            _this.directions = [];
            return _this;
        }
        MatMultiSort.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        MatMultiSort.prototype.sort = function (sortable) {
            this.updateMultipleSorts(sortable);
            _super.prototype.sort.call(this, sortable);
        };
        MatMultiSort.prototype.updateMultipleSorts = function (sortable) {
            var i = this.actives.findIndex(function (activeId) { return activeId === sortable.id; });
            if (this.isActive(sortable)) {
                if (this.activeDirection(sortable) === (sortable.start ? sortable.start : this.start)) {
                    this.directions.splice(i, 1, this.getNextSortDirection(sortable));
                }
                else {
                    this.actives.splice(i, 1);
                    this.directions.splice(i, 1);
                }
            }
            else {
                this.actives.push(sortable.id);
                this.directions.push(sortable.start ? sortable.start : this.start);
            }
        };
        MatMultiSort.prototype.isActive = function (sortable) {
            var i = this.actives.findIndex(function (activeId) { return activeId === sortable.id; });
            return i > -1;
        };
        MatMultiSort.prototype.activeDirection = function (sortable) {
            var i = this.actives.findIndex(function (activeId) { return activeId === sortable.id; });
            return this.directions[i] || (sortable.start ? sortable.start : this.start);
        };
        return MatMultiSort;
    }(sort.MatSort));
    MatMultiSort.decorators = [
        { type: core.Directive, args: [{
                    selector: '[matMultiSort]',
                    exportAs: 'matMultiSort'
                },] }
    ];

    var MatMultiSortHeaderComponent = /** @class */ (function (_super) {
        __extends(MatMultiSortHeaderComponent, _super);
        function MatMultiSortHeaderComponent(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {
            var _this = _super.call(this, _intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) || this;
            _this._intl = _intl;
            _this._sort = _sort;
            _this._columnDef = _columnDef;
            _this.start = 'asc';
            return _this;
        }
        MatMultiSortHeaderComponent.prototype.__setIndicatorHintVisible = function (visible) {
            _super.prototype._setIndicatorHintVisible.call(this, visible);
        };
        MatMultiSortHeaderComponent.prototype._handleClick = function () {
            this._sort.direction = this.getSortDirection();
            _super.prototype._handleClick.call(this);
        };
        MatMultiSortHeaderComponent.prototype._isSorted = function () {
            var _this = this;
            return this._sort.actives.findIndex(function (activeId) { return activeId === _this.id; }) > -1;
        };
        MatMultiSortHeaderComponent.prototype._sortId = function () {
            var _this = this;
            return this._sort.actives.findIndex(function (activeId) { return activeId === _this.id; }) + 1;
        };
        MatMultiSortHeaderComponent.prototype._updateArrowDirection = function () {
            this._arrowDirection = this.getSortDirection();
        };
        MatMultiSortHeaderComponent.prototype._getAriaSortAttribute = function () {
            if (!this._isSorted()) {
                return null;
            }
            return this.getSortDirection() === 'asc' ? 'ascending' : 'descending';
        };
        MatMultiSortHeaderComponent.prototype._renderArrow = function () {
            return !this._isDisabled() || this._isSorted();
        };
        MatMultiSortHeaderComponent.prototype.getSortDirection = function () {
            var _this = this;
            var i = this._sort.actives.findIndex(function (activeIds) { return activeIds === _this.id; });
            var direction = this._sort.directions[i];
            return this._isSorted() ? direction : (this.start || this._sort.start);
        };
        return MatMultiSortHeaderComponent;
    }(sort.MatSortHeader));
    MatMultiSortHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: '[mat-multi-sort-header]',
                    exportAs: 'matMultiSortHeader',
                    template: "<div class=\"mat-sort-header-container\"\r\n     [class.mat-sort-header-sorted]=\"_isSorted()\"\r\n     [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\">\r\n  <button class=\"mat-sort-header-button\" type=\"button\"\r\n          [attr.disabled]=\"_isDisabled() || null\"\r\n          [attr.aria-label]=\"_intl.sortButtonLabel(id)\"\r\n          (focus)=\"_setIndicatorHintVisible(true)\"\r\n          (blur)=\"_setIndicatorHintVisible(false)\">\r\n    <ng-content></ng-content>\r\n  </button>\r\n\r\n  <!-- Disable animations while a current animation is running -->\r\n  <div class=\"mat-sort-header-arrow\"\r\n       *ngIf=\"_renderArrow()\"\r\n       [@arrowOpacity]=\"_getArrowViewState()\"\r\n       [@arrowPosition]=\"_getArrowViewState()\"\r\n       [@allowChildren]=\"_getArrowDirectionState()\"\r\n       (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\r\n       (@arrowPosition.done)=\"_disableViewStateAnimation = false\">\r\n    <div class=\"mat-sort-header-stem\"></div>\r\n    <div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\">\r\n      <div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div>\r\n      <div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div>\r\n      <div class=\"mat-sort-header-pointer-middle\"></div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"_isSorted()\">{{_sortId()}}</div>\r\n</div>\r\n",
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    animations: [
                        sort.matSortAnimations.indicator,
                        sort.matSortAnimations.leftPointer,
                        sort.matSortAnimations.rightPointer,
                        sort.matSortAnimations.arrowOpacity,
                        sort.matSortAnimations.arrowPosition,
                        sort.matSortAnimations.allowChildren
                    ],
                    styles: [".mat-sort-header-container{align-items:center;cursor:pointer;display:flex}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{align-items:center;background:0 0;border:none;color:currentColor;cursor:inherit;display:flex;font:inherit;outline:0;padding:0}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{display:flex;height:12px;min-width:12px;opacity:0;position:relative;width:12px}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{align-items:center;background:currentColor;display:flex;height:10px;margin:auto;width:2px}.mat-sort-header-indicator{align-items:center;display:flex;height:2px;left:0;position:absolute;top:0;width:100%}.mat-sort-header-pointer-middle{background:currentColor;height:2px;margin:auto;transform:rotate(45deg);width:2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;height:2px;position:absolute;top:0;width:6px}.mat-sort-header-pointer-left{left:0;transform-origin:right}.mat-sort-header-pointer-right{right:0;transform-origin:left}"]
                },] }
    ];
    MatMultiSortHeaderComponent.ctorParameters = function () { return [
        { type: sort.MatSortHeaderIntl },
        { type: core.ChangeDetectorRef },
        { type: MatMultiSort, decorators: [{ type: core.Optional }] },
        { type: undefined, decorators: [{ type: core.Inject, args: ['C2_SORT_HEADER_COLUMN_DEF',] }, { type: core.Optional }] },
        { type: a11y.FocusMonitor },
        { type: core.ElementRef }
    ]; };
    MatMultiSortHeaderComponent.propDecorators = {
        id: [{ type: core.Input, args: ['mat-multi-sort-header',] }],
        __setIndicatorHintVisible: [{ type: core.HostListener, args: ['mouseenter', ['true'],] }, { type: core.HostListener, args: ['longpress', ['true'],] }, { type: core.HostListener, args: ['mouseleave', ['false'],] }],
        _getAriaSortAttribute: [{ type: core.HostBinding, args: ['attr.aria-sort',] }]
    };

    var MatMultiSortColumnDialogComponent = /** @class */ (function () {
        function MatMultiSortColumnDialogComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.sort = [];
            this._tableData = data.tableData;
            this.sort = data.sort;
            this.closeOnChoice = data.closeOnChoice;
        }
        MatMultiSortColumnDialogComponent.prototype.ngOnInit = function () {
        };
        MatMultiSortColumnDialogComponent.prototype.drop = function (event) {
            dragDrop.moveItemInArray(this._tableData.columns, event.previousIndex, event.currentIndex);
            this._tableData.displayedColumns = this._tableData.columns.filter(function (c) { return c.isActive; }).map(function (c) { return c.id; });
            this._tableData.storeTableSettings();
        };
        MatMultiSortColumnDialogComponent.prototype.toggle = function () {
            var _this = this;
            this._tableData.displayedColumns = this._tableData.columns.filter(function (c) {
                if (!c.isActive) {
                    _this.sort = _this.sort.filter(function (s) { return s.id !== c.id; });
                }
                return c.isActive;
            }).map(function (c) { return c.id; });
            this.updateSort();
        };
        MatMultiSortColumnDialogComponent.prototype.updateSort = function () {
            this._tableData.sortParams = this.sort.map(function (v) { return v.id; });
            this._tableData.sortDirs = this.sort.map(function (v) { return v.direction; });
            this._tableData.updateSortHeaders();
            if (this.closeOnChoice) {
                this.dialogRef.close();
            }
        };
        return MatMultiSortColumnDialogComponent;
    }());
    MatMultiSortColumnDialogComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mat-multi-sort-column-dialog',
                    template: "<div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\r\n  <div class=\"example-box\" *ngFor=\"let column of _tableData.columns\" cdkDrag>\r\n    <mat-icon>drag_indicator</mat-icon>\r\n    <mat-checkbox [(ngModel)]=\"column.isActive\" (change)=\"toggle()\">{{column.name}}</mat-checkbox>\r\n  </div>\r\n</div>\r\n",
                    encapsulation: core.ViewEncapsulation.None,
                    styles: [".column-dialog .mat-dialog-container{padding:0}.example-box{align-items:center;display:flex;height:48px;justify-content:flex-start;margin:1px;padding:0 16px 0 8px}.example-box mat-icon{margin-right:16px}.example-box mat-checkbox{color:rgba(0,0,0,.87);font-size:14px;font-weight:400;line-height:48px}.example-box:hover{border-bottom:1px solid rgba(0,0,0,.12);border-top:1px solid rgba(0,0,0,.12);cursor:move}.my-menu:hover{cursor:move}.cdk-drag-preview{border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-sizing:border-box}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
                },] }
    ];
    MatMultiSortColumnDialogComponent.ctorParameters = function () { return [
        { type: dialog.MatDialogRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
    ]; };

    var MatMultiSortTableSettingsComponent = /** @class */ (function () {
        function MatMultiSortTableSettingsComponent(dialog) {
            this.dialog = dialog;
            this.sort = [];
            this.closeDialogOnChoice = true;
        }
        Object.defineProperty(MatMultiSortTableSettingsComponent.prototype, "tableData", {
            set: function (tableData) {
                this._tableData = tableData;
            },
            enumerable: false,
            configurable: true
        });
        MatMultiSortTableSettingsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sort = this.getSort();
            this._tableData.sortObservable.subscribe(function () { return _this.sort = _this.getSort(); });
            this._tableData.onColumnsChange().subscribe(function () { return _this.sort = _this.getSort(); });
        };
        MatMultiSortTableSettingsComponent.prototype.openDialog = function () {
            var _this = this;
            if (this.dialogRef) {
                return;
            }
            var button = this.buttonRef.nativeElement;
            var posRight = window.innerWidth - (button.offsetLeft + button.offsetWidth + 16);
            var posTop = button.offsetTop + button.offsetHeight;
            this.dialogRef = this.dialog.open(MatMultiSortColumnDialogComponent, {
                backdropClass: 'cdk-overlay-transparent-backdrop',
                panelClass: 'column-dialog',
                position: { right: posRight + "px", top: posTop + "px" },
                data: { tableData: this._tableData, sort: this.sort, closeOnChoice: this.closeDialogOnChoice }
            });
            this.dialogRef.backdropClick().subscribe(function () { return _this.dialogRef.close(); });
            this.dialogRef.afterClosed().pipe(operators.finalize(function () { return _this.dialogRef = null; })).subscribe();
        };
        MatMultiSortTableSettingsComponent.prototype.dropSort = function (event) {
            dragDrop.moveItemInArray(this.sort, event.previousIndex, event.currentIndex);
            this.updateSort();
        };
        MatMultiSortTableSettingsComponent.prototype.getSort = function () {
            var _this = this;
            var sorting = [];
            var _loop_1 = function (i) {
                sorting.push({
                    id: this_1._tableData.sortParams[i],
                    name: this_1._tableData.columns.find(function (c) { return c.id === _this._tableData.sortParams[i]; }).name,
                    direction: this_1._tableData.sortDirs[i]
                });
            };
            var this_1 = this;
            for (var i = 0; i < this._tableData.sortParams.length; i++) {
                _loop_1(i);
            }
            return sorting;
        };
        MatMultiSortTableSettingsComponent.prototype.remove = function (id) {
            this.sort = this.sort.filter(function (v) { return v.id !== id; });
            this.updateSort();
        };
        MatMultiSortTableSettingsComponent.prototype.updateDirection = function (id) {
            var i = this.sort.findIndex(function (v) { return v.id === id; });
            if (this.sort[i].direction === 'asc') {
                this.sort[i].direction = 'desc';
            }
            else {
                this.sort[i].direction = 'asc';
            }
            this.updateSort();
        };
        MatMultiSortTableSettingsComponent.prototype.updateSort = function () {
            this._tableData.sortParams = this.sort.map(function (v) { return v.id; });
            this._tableData.sortDirs = this.sort.map(function (v) { return v.direction; });
            this._tableData.updateSortHeaders();
        };
        return MatMultiSortTableSettingsComponent;
    }());
    MatMultiSortTableSettingsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mat-multi-sort-table-settings',
                    template: "<div class=\"table-settings\">\r\n    <div class=\"table-settings-sort\">\r\n        <mat-chip-list class=\"drag-chip-list\" cdkDropList cdkDropListOrientation='horizontal'\r\n            (cdkDropListDropped)=\"dropSort($event)\">\r\n            <mat-chip class=\"drag-chip\" *ngFor=\"let item of sort\" cdkDrag (removed)=\"remove(item.id)\"\r\n                (click)=\"updateDirection(item.id)\">\r\n                {{item.name}}:\r\n                <div class=\"sorting\" [matTooltip]=\"sortToolTip\">\r\n                    {{item.direction}}\r\n                </div>\r\n                <mat-icon matChipRemove>cancel</mat-icon>\r\n            </mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <div style=\"flex: 1 1 auto;\"></div>\r\n    <div #settingsMenu (click)=\"openDialog()\" class=\"table-settings-menu\">\r\n        <ng-content #menuRef></ng-content>\r\n    </div>\r\n</div>\r\n",
                    styles: [".table-settings{display:flex}.table-settings .table-settings-menu{margin:8px 16px}.table-settings-sort{margin:auto 0}.sorting{color:#757575;display:inline-block;margin:0 6px}.sorting:hover{cursor:pointer}.drag-chip{background-color:#fff;border:1px solid rgba(0,0,0,.12)}.drag-chip:hover{background-color:#fff;cursor:move}.drag-chip:focus:after,.drag-chip:hover:after{opacity:0}.drag-chip-list.cdk-drop-list-dragging .drag-chip:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
                },] }
    ];
    MatMultiSortTableSettingsComponent.ctorParameters = function () { return [
        { type: dialog.MatDialog }
    ]; };
    MatMultiSortTableSettingsComponent.propDecorators = {
        buttonRef: [{ type: core.ViewChild, args: ['settingsMenu',] }],
        sortToolTip: [{ type: core.Input }],
        closeDialogOnChoice: [{ type: core.Input }],
        tableData: [{ type: core.Input }]
    };

    var MatMultiSortModule = /** @class */ (function () {
        function MatMultiSortModule() {
        }
        return MatMultiSortModule;
    }());
    MatMultiSortModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        MatMultiSortHeaderComponent,
                        MatMultiSort,
                        MatMultiSortTableSettingsComponent,
                        MatMultiSortColumnDialogComponent
                    ],
                    exports: [
                        MatMultiSortHeaderComponent,
                        MatMultiSort,
                        MatMultiSortTableSettingsComponent
                    ],
                    imports: [
                        common.CommonModule,
                        core$1.MatCommonModule,
                        divider.MatDividerModule,
                        dragDrop.DragDropModule,
                        icon.MatIconModule,
                        checkbox.MatCheckboxModule,
                        menu.MatMenuModule,
                        button.MatButtonModule,
                        forms.FormsModule,
                        chips.MatChipsModule,
                        tooltip.MatTooltipModule,
                        dialog.MatDialogModule
                    ]
                },] }
    ];

    var Settings = /** @class */ (function () {
        function Settings(key) {
            this._key = key;
            this._columns = [];
            this._sortParams = [];
            this._sortDirs = [];
        }
        Settings.prototype.load = function () {
            var value = JSON.parse(localStorage.getItem(this._key));
            if (value) {
                this._columns = value._columns || [];
                this._sortDirs = value._sortDirs || [];
                this._sortParams = value._sortParams || [];
            }
        };
        Settings.prototype.save = function () {
            var settingsString = JSON.stringify(this);
            localStorage.setItem(this._key, settingsString);
        };
        Object.defineProperty(Settings.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            set: function (columns) {
                this._columns = columns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Settings.prototype, "sortParams", {
            get: function () {
                return this._sortParams;
            },
            set: function (sortParams) {
                this._sortParams = sortParams;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Settings.prototype, "sortDirs", {
            get: function () {
                return this._sortDirs;
            },
            set: function (sortDirs) {
                this._sortDirs = sortDirs;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Settings.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: false,
            configurable: true
        });
        return Settings;
    }());

    var TableData = /** @class */ (function () {
        // TODO refactor
        function TableData(columns, options) {
            var _this = this;
            this._nextObservable = new rxjs.Subject();
            this._previousObservable = new rxjs.Subject();
            this._sizeObservable = new rxjs.Subject();
            this._sortObservable = new rxjs.Subject();
            this._columns = new rxjs.BehaviorSubject(columns.map(function (c) {
                if (c.isActive === undefined) {
                    c.isActive = true;
                }
                return c;
            }));
            if (options) {
                if (options.pageSizeOptions && options.pageSizeOptions.length < 1) {
                    throw Error('Array of pageSizeOptions must contain at least one entry');
                }
                if (options.defaultSortParams) {
                    options.defaultSortParams.map(function (s) {
                        if (!_this._displayedColumns.includes(s)) {
                            throw Error("Provided sort parameter \"" + s + "\" is not a column.");
                        }
                    });
                }
                this._sortParams = options.defaultSortParams || [];
                this._sortDirs = options.defaultSortDirs || [];
                if (this._sortParams.length !== this._sortDirs.length) {
                    this._sortDirs = this._sortParams.map(function () { return 'asc'; });
                }
                this._totalElements = options.totalElements || 0;
                this._pageSizeOptions = options.pageSizeOptions || [10, 20, 50, 100];
                this._key = options.localStorageKey;
            }
            else {
                this._pageSizeOptions = [10, 20, 50, 100];
                this._sortParams = [];
                this._sortDirs = [];
            }
            this.pageSize = this._pageSizeOptions[0];
            this.init();
            this._displayedColumns = this._columns.value.filter(function (c) { return c.isActive; }).map(function (c) { return c.id; });
        }
        TableData.prototype.onSortEvent = function () {
            this._sortParams = this._dataSource.sort['actives'];
            this._sortDirs = this._dataSource.sort['directions'];
            this._clientSideSort();
            this._sortObservable.next();
            this.storeTableSettings();
        };
        TableData.prototype.onPaginationEvent = function ($event) {
            var tmpPageSize = this.pageSize;
            this.pageSize = $event.pageSize;
            this.pageIndex = $event.pageIndex;
            if (tmpPageSize !== this.pageSize) {
                this._sizeObservable.next();
            }
            else if ($event.previousPageIndex < $event.pageIndex) {
                this._nextObservable.next();
            }
            else if ($event.previousPageIndex > $event.pageIndex) {
                this._previousObservable.next();
            }
        };
        TableData.prototype.updateSortHeaders = function () {
            var _this = this;
            // Dirty hack to display default sort column(s)
            var temp = Object.assign([], this._displayedColumns);
            this._displayedColumns = [];
            setTimeout(function () { return _this._displayedColumns = temp; }, 0);
            this._clientSideSort();
            this._sortObservable.next();
            this.storeTableSettings();
            1;
        };
        TableData.prototype.init = function () {
            console.debug("init");
            if (this._key) {
                var settings = new Settings(this._key);
                settings.load();
                if (this._isLocalStorageSettingsValid(settings)) {
                    this.columns = settings.columns;
                    this._sortDirs = settings.sortDirs;
                    this._sortParams = settings.sortParams;
                }
                else {
                    console.warn("Stored tableSettings are invalid. Using default");
                }
            }
        };
        TableData.prototype._clientSideSort = function () {
            this._dataSource.orderData();
        };
        TableData.prototype._isLocalStorageSettingsValid = function (settings) {
            var e_1, _a;
            // check if number of columns matching
            if (settings.columns.length !== this._columns.value.length) {
                return false;
            }
            try {
                // check if columns are the same
                for (var _b = __values(settings.columns), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var column = _c.value;
                    var match = this._columns.value.filter(function (c) { return c.id == column.id && c.name == column.name; });
                    if (match === undefined) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        };
        TableData.prototype.storeTableSettings = function () {
            console.log("Store");
            if (this._key) {
                var settings = new Settings(this._key);
                settings.columns = this._columns.value;
                settings.sortParams = this._sortParams;
                settings.sortDirs = this._sortDirs;
                settings.save();
            }
        };
        Object.defineProperty(TableData.prototype, "totalElements", {
            get: function () {
                return this._totalElements;
            },
            set: function (totalElements) {
                this._totalElements = totalElements;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "displayedColumns", {
            get: function () {
                return this._displayedColumns;
            },
            set: function (displayedColumns) {
                this._displayedColumns = displayedColumns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "dataSource", {
            get: function () {
                return this._dataSource;
            },
            set: function (dataSource) {
                this._dataSource = dataSource;
                if (this._sortParams.length > 0) {
                    this._dataSource.sort.actives = this._sortParams;
                    this._dataSource.sort.directions = this._sortDirs.map(function (v) { return v; });
                    this.updateSortHeaders();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "data", {
            set: function (data) {
                this._dataSource.data = data;
                this._clientSideSort();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "columns", {
            get: function () {
                return this._columns.value;
            },
            set: function (v) {
                this._columns.next(v.map(function (c) {
                    if (c.isActive === undefined) {
                        c.isActive = true;
                    }
                    return c;
                }));
            },
            enumerable: false,
            configurable: true
        });
        TableData.prototype.onColumnsChange = function () {
            return this._columns;
        };
        TableData.prototype.updateColumnNames = function (v) {
            var dict = {};
            v.forEach(function (c) { return dict[c.id] = c.name; });
            this._columns.next(this._columns.value.map(function (c) { c.name = dict[c.id] || c.name; return c; }));
        };
        Object.defineProperty(TableData.prototype, "nextObservable", {
            get: function () {
                return this._nextObservable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "previousObservable", {
            get: function () {
                return this._previousObservable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "sizeObservable", {
            get: function () {
                return this._sizeObservable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "sortObservable", {
            get: function () {
                return this._sortObservable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "sortParams", {
            get: function () {
                return this._sortParams;
            },
            set: function (v) {
                this._sortParams = v;
                this._dataSource.sort.actives = this._sortParams;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "sortDirs", {
            get: function () {
                return this._sortDirs;
            },
            set: function (v) {
                this._sortDirs = v;
                this._dataSource.sort.directions = this._sortDirs.map(function (elem) { return elem; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableData.prototype, "pageSizeOptions", {
            get: function () {
                return this._pageSizeOptions;
            },
            enumerable: false,
            configurable: true
        });
        return TableData;
    }());

    var MatMultiSortTableDataSource = /** @class */ (function (_super) {
        __extends(MatMultiSortTableDataSource, _super);
        function MatMultiSortTableDataSource(sort, clientSideSorting) {
            if (clientSideSorting === void 0) { clientSideSorting = false; }
            var _this = _super.call(this) || this;
            _this._data = new rxjs.BehaviorSubject([]);
            _this.sort = sort;
            _this.clientSideSorting = clientSideSorting;
            return _this;
        }
        Object.defineProperty(MatMultiSortTableDataSource.prototype, "data", {
            get: function () {
                return this._data.value;
            },
            set: function (data) {
                this._data.next(data);
            },
            enumerable: false,
            configurable: true
        });
        MatMultiSortTableDataSource.prototype.connect = function () {
            return this._data;
        };
        MatMultiSortTableDataSource.prototype.disconnect = function () {
            this._data.complete();
        };
        MatMultiSortTableDataSource.prototype.orderData = function () {
            this._data.next(this.sortData(this._data.value, this.sort.actives, this.sort.directions));
        };
        MatMultiSortTableDataSource.prototype.sortData = function (data, actives, directions) {
            var _this = this;
            var _data = Object.assign(new Array(), data);
            if (this.clientSideSorting) {
                return _data.sort(function (i1, i2) {
                    return _this._sortData(i1, i2, actives, directions);
                });
            }
            return _data;
        };
        MatMultiSortTableDataSource.prototype._sortData = function (d1, d2, params, dirs) {
            if (d1[params[0]] > d2[params[0]]) {
                return dirs[0] === 'asc' ? 1 : -1;
            }
            else if (d1[params[0]] < d2[params[0]]) {
                return dirs[0] === 'asc' ? -1 : 1;
            }
            else {
                if (params.length > 1) {
                    params = params.slice(1, params.length);
                    dirs = dirs.slice(1, dirs.length);
                    return this._sortData(d1, d2, params, dirs);
                }
                else {
                    return 0;
                }
            }
        };
        return MatMultiSortTableDataSource;
    }(collections.DataSource));

    /*
     * Public API Surface of mat-multi-sort
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MatMultiSort = MatMultiSort;
    exports.MatMultiSortHeaderComponent = MatMultiSortHeaderComponent;
    exports.MatMultiSortModule = MatMultiSortModule;
    exports.MatMultiSortTableDataSource = MatMultiSortTableDataSource;
    exports.MatMultiSortTableSettingsComponent = MatMultiSortTableSettingsComponent;
    exports.TableData = TableData;
    exports.ɵa = MatMultiSortColumnDialogComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-mat-multi-sort.umd.js.map
