export class Settings {
    constructor(key) {
        this._key = key;
        this._columns = [];
        this._sortParams = [];
        this._sortDirs = [];
    }
    load() {
        const value = JSON.parse(localStorage.getItem(this._key));
        if (value) {
            this._columns = value._columns || [];
            this._sortDirs = value._sortDirs || [];
            this._sortParams = value._sortParams || [];
        }
    }
    save() {
        const settingsString = JSON.stringify(this);
        localStorage.setItem(this._key, settingsString);
    }
    get columns() {
        return this._columns;
    }
    get sortParams() {
        return this._sortParams;
    }
    get sortDirs() {
        return this._sortDirs;
    }
    get key() {
        return this._key;
    }
    set columns(columns) {
        this._columns = columns;
    }
    set sortParams(sortParams) {
        this._sortParams = sortParams;
    }
    set sortDirs(sortDirs) {
        this._sortDirs = sortDirs;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbWF0LW11bHRpLXNvcnQvc3JjLyIsInNvdXJjZXMiOlsibGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxRQUFRO0lBTWpCLFlBQVksR0FBVztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRU0sSUFBSTtRQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUVNLElBQUk7UUFDUCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxPQUFPLENBQUMsT0FBZ0U7UUFDL0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQVcsVUFBVSxDQUFDLFVBQW9CO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFXLFFBQVEsQ0FBQyxRQUFrQjtRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgcHJpdmF0ZSBfY29sdW1uczogQXJyYXk8eyBpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGlzQWN0aXZlPzogYm9vbGVhbiB9PjtcclxuICAgIHByaXZhdGUgX3NvcnRQYXJhbXM6IHN0cmluZ1tdO1xyXG4gICAgcHJpdmF0ZSBfc29ydERpcnM6IHN0cmluZ1tdO1xyXG4gICAgcHJpdmF0ZSBfa2V5OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5fY29sdW1ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3NvcnRQYXJhbXMgPSBbXTtcclxuICAgICAgICB0aGlzLl9zb3J0RGlycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2FkKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLl9rZXkpKTtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29sdW1ucyA9IHZhbHVlLl9jb2x1bW5zIHx8IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9zb3J0RGlycyA9IHZhbHVlLl9zb3J0RGlycyB8fCBbXTtcclxuICAgICAgICAgICAgdGhpcy5fc29ydFBhcmFtcyA9IHZhbHVlLl9zb3J0UGFyYW1zIHx8IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2F2ZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5nc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuX2tleSwgc2V0dGluZ3NTdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29sdW1ucygpOiBBcnJheTx7IGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgaXNBY3RpdmU/OiBib29sZWFuIH0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHNvcnRQYXJhbXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3J0UGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc29ydERpcnMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3J0RGlycztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGtleSgpOiBTdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjb2x1bW5zKGNvbHVtbnM6IEFycmF5PHsgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBpc0FjdGl2ZT86IGJvb2xlYW4gfT4pIHtcclxuICAgICAgICB0aGlzLl9jb2x1bW5zID0gY29sdW1ucztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNvcnRQYXJhbXMoc29ydFBhcmFtczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLl9zb3J0UGFyYW1zID0gc29ydFBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNvcnREaXJzKHNvcnREaXJzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuX3NvcnREaXJzID0gc29ydERpcnM7XHJcbiAgICB9XHJcbn1cclxuIl19