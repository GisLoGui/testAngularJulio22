import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
export class MatMultiSortColumnDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.sort = [];
        this._tableData = data.tableData;
        this.sort = data.sort;
        this.closeOnChoice = data.closeOnChoice;
    }
    ngOnInit() {
    }
    drop(event) {
        moveItemInArray(this._tableData.columns, event.previousIndex, event.currentIndex);
        this._tableData.displayedColumns = this._tableData.columns.filter(c => c.isActive).map(c => c.id);
        this._tableData.storeTableSettings();
    }
    toggle() {
        this._tableData.displayedColumns = this._tableData.columns.filter(c => {
            if (!c.isActive) {
                this.sort = this.sort.filter(s => s.id !== c.id);
            }
            return c.isActive;
        }).map(c => c.id);
        this.updateSort();
    }
    updateSort() {
        this._tableData.sortParams = this.sort.map(v => v.id);
        this._tableData.sortDirs = this.sort.map(v => v.direction);
        this._tableData.updateSortHeaders();
        if (this.closeOnChoice) {
            this.dialogRef.close();
        }
    }
}
MatMultiSortColumnDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-multi-sort-column-dialog',
                template: "<div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\r\n  <div class=\"example-box\" *ngFor=\"let column of _tableData.columns\" cdkDrag>\r\n    <mat-icon>drag_indicator</mat-icon>\r\n    <mat-checkbox [(ngModel)]=\"column.isActive\" (change)=\"toggle()\">{{column.name}}</mat-checkbox>\r\n  </div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".column-dialog .mat-dialog-container{padding:0}.example-box{align-items:center;display:flex;height:48px;justify-content:flex-start;margin:1px;padding:0 16px 0 8px}.example-box mat-icon{margin-right:16px}.example-box mat-checkbox{color:rgba(0,0,0,.87);font-size:14px;font-weight:400;line-height:48px}.example-box:hover{border-bottom:1px solid rgba(0,0,0,.12);border-top:1px solid rgba(0,0,0,.12);cursor:move}.my-menu:hover{cursor:move}.cdk-drag-preview{border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-sizing:border-box}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-box:last-child{border:none}.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
            },] }
];
MatMultiSortColumnDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LW11bHRpLXNvcnQtY29sdW1uLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbWF0LW11bHRpLXNvcnQvc3JjLyIsInNvdXJjZXMiOlsibGliL21hdC1tdWx0aS1zb3J0LWNvbHVtbi1kaWFsb2cvbWF0LW11bHRpLXNvcnQtY29sdW1uLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQVUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFjLGVBQWUsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRXBFLE9BQU8sRUFBQyxlQUFlLEVBQUUsWUFBWSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFRdkUsTUFBTSxPQUFPLGlDQUFpQztJQU01QyxZQUFvQixTQUEwRCxFQUN6QyxJQUFJO1FBRHJCLGNBQVMsR0FBVCxTQUFTLENBQWlEO1FBSDlFLFNBQUksR0FBRyxFQUFFLENBQUM7UUFLUixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMxQyxDQUFDO0lBRUQsUUFBUTtJQUNSLENBQUM7SUFFRCxJQUFJLENBQUMsS0FBNEI7UUFDL0IsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtnQkFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbEQ7WUFFRCxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDcEMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOzs7WUE5Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw4QkFBOEI7Z0JBQ3hDLDhWQUE0RDtnQkFFNUQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3RDOzs7WUFQd0IsWUFBWTs0Q0FldEIsTUFBTSxTQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDZGtEcmFnRHJvcCwgbW92ZUl0ZW1JbkFycmF5fSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcclxuaW1wb3J0IHtUYWJsZURhdGF9IGZyb20gJy4uL3RhYmxlLWRhdGEnO1xyXG5pbXBvcnQge01BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtYXQtbXVsdGktc29ydC1jb2x1bW4tZGlhbG9nJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbWF0LW11bHRpLXNvcnQtY29sdW1uLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LW11bHRpLXNvcnQtY29sdW1uLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdE11bHRpU29ydENvbHVtbkRpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIF90YWJsZURhdGE6IFRhYmxlRGF0YTxhbnk+O1xyXG4gIHNvcnQgPSBbXTtcclxuICBjbG9zZU9uQ2hvaWNlOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPE1hdE11bHRpU29ydENvbHVtbkRpYWxvZ0NvbXBvbmVudD4sXHJcbiAgICAgICAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIGRhdGEpIHtcclxuICAgIHRoaXMuX3RhYmxlRGF0YSA9IGRhdGEudGFibGVEYXRhO1xyXG4gICAgdGhpcy5zb3J0ID0gZGF0YS5zb3J0O1xyXG4gICAgdGhpcy5jbG9zZU9uQ2hvaWNlID0gZGF0YS5jbG9zZU9uQ2hvaWNlO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICBkcm9wKGV2ZW50OiBDZGtEcmFnRHJvcDxzdHJpbmdbXT4pIHtcclxuICAgIG1vdmVJdGVtSW5BcnJheSh0aGlzLl90YWJsZURhdGEuY29sdW1ucywgZXZlbnQucHJldmlvdXNJbmRleCwgZXZlbnQuY3VycmVudEluZGV4KTtcclxuICAgIHRoaXMuX3RhYmxlRGF0YS5kaXNwbGF5ZWRDb2x1bW5zID0gdGhpcy5fdGFibGVEYXRhLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5pc0FjdGl2ZSkubWFwKGMgPT4gYy5pZCk7XHJcbiAgICB0aGlzLl90YWJsZURhdGEuc3RvcmVUYWJsZVNldHRpbmdzKCk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICB0aGlzLl90YWJsZURhdGEuZGlzcGxheWVkQ29sdW1ucyA9IHRoaXMuX3RhYmxlRGF0YS5jb2x1bW5zLmZpbHRlcihjID0+IHtcclxuICAgICAgaWYgKCFjLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0ID0gdGhpcy5zb3J0LmZpbHRlcihzID0+IHMuaWQgIT09IGMuaWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYy5pc0FjdGl2ZTtcclxuICAgIH0pLm1hcChjID0+IGMuaWQpO1xyXG4gICAgdGhpcy51cGRhdGVTb3J0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVNvcnQoKSB7XHJcbiAgICB0aGlzLl90YWJsZURhdGEuc29ydFBhcmFtcyA9IHRoaXMuc29ydC5tYXAodiA9PiB2LmlkKTtcclxuICAgIHRoaXMuX3RhYmxlRGF0YS5zb3J0RGlycyA9IHRoaXMuc29ydC5tYXAodiA9PiB2LmRpcmVjdGlvbik7XHJcbiAgICB0aGlzLl90YWJsZURhdGEudXBkYXRlU29ydEhlYWRlcnMoKTtcclxuICAgIGlmICh0aGlzLmNsb3NlT25DaG9pY2UpIHtcclxuICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19