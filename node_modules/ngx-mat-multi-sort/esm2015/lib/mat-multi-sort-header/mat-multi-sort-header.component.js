import { Component, Input, ChangeDetectorRef, Optional, Inject, HostListener, HostBinding, ViewEncapsulation, ChangeDetectionStrategy, ElementRef } from '@angular/core';
import { matSortAnimations, MatSortHeader, MatSortHeaderIntl } from '@angular/material/sort';
import { MatMultiSort } from '../mat-multi-sort.directive';
import { FocusMonitor } from '@angular/cdk/a11y';
export class MatMultiSortHeaderComponent extends MatSortHeader {
    constructor(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {
        super(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef);
        this._intl = _intl;
        this._sort = _sort;
        this._columnDef = _columnDef;
        this.start = 'asc';
    }
    __setIndicatorHintVisible(visible) {
        super._setIndicatorHintVisible(visible);
    }
    _handleClick() {
        this._sort.direction = this.getSortDirection();
        super._handleClick();
    }
    _isSorted() {
        return this._sort.actives.findIndex(activeId => activeId === this.id) > -1;
    }
    _sortId() {
        return this._sort.actives.findIndex(activeId => activeId === this.id) + 1;
    }
    _updateArrowDirection() {
        this._arrowDirection = this.getSortDirection();
    }
    _getAriaSortAttribute() {
        if (!this._isSorted()) {
            return null;
        }
        return this.getSortDirection() === 'asc' ? 'ascending' : 'descending';
    }
    _renderArrow() {
        return !this._isDisabled() || this._isSorted();
    }
    getSortDirection() {
        const i = this._sort.actives.findIndex(activeIds => activeIds === this.id);
        const direction = this._sort.directions[i];
        return this._isSorted() ? direction : (this.start || this._sort.start);
    }
}
MatMultiSortHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: '[mat-multi-sort-header]',
                exportAs: 'matMultiSortHeader',
                template: "<div class=\"mat-sort-header-container\"\r\n     [class.mat-sort-header-sorted]=\"_isSorted()\"\r\n     [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\">\r\n  <button class=\"mat-sort-header-button\" type=\"button\"\r\n          [attr.disabled]=\"_isDisabled() || null\"\r\n          [attr.aria-label]=\"_intl.sortButtonLabel(id)\"\r\n          (focus)=\"_setIndicatorHintVisible(true)\"\r\n          (blur)=\"_setIndicatorHintVisible(false)\">\r\n    <ng-content></ng-content>\r\n  </button>\r\n\r\n  <!-- Disable animations while a current animation is running -->\r\n  <div class=\"mat-sort-header-arrow\"\r\n       *ngIf=\"_renderArrow()\"\r\n       [@arrowOpacity]=\"_getArrowViewState()\"\r\n       [@arrowPosition]=\"_getArrowViewState()\"\r\n       [@allowChildren]=\"_getArrowDirectionState()\"\r\n       (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\r\n       (@arrowPosition.done)=\"_disableViewStateAnimation = false\">\r\n    <div class=\"mat-sort-header-stem\"></div>\r\n    <div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\">\r\n      <div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div>\r\n      <div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div>\r\n      <div class=\"mat-sort-header-pointer-middle\"></div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"_isSorted()\">{{_sortId()}}</div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    matSortAnimations.indicator,
                    matSortAnimations.leftPointer,
                    matSortAnimations.rightPointer,
                    matSortAnimations.arrowOpacity,
                    matSortAnimations.arrowPosition,
                    matSortAnimations.allowChildren
                ],
                styles: [".mat-sort-header-container{align-items:center;cursor:pointer;display:flex}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{align-items:center;background:0 0;border:none;color:currentColor;cursor:inherit;display:flex;font:inherit;outline:0;padding:0}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{display:flex;height:12px;min-width:12px;opacity:0;position:relative;width:12px}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{align-items:center;background:currentColor;display:flex;height:10px;margin:auto;width:2px}.mat-sort-header-indicator{align-items:center;display:flex;height:2px;left:0;position:absolute;top:0;width:100%}.mat-sort-header-pointer-middle{background:currentColor;height:2px;margin:auto;transform:rotate(45deg);width:2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;height:2px;position:absolute;top:0;width:6px}.mat-sort-header-pointer-left{left:0;transform-origin:right}.mat-sort-header-pointer-right{right:0;transform-origin:left}"]
            },] }
];
MatMultiSortHeaderComponent.ctorParameters = () => [
    { type: MatSortHeaderIntl },
    { type: ChangeDetectorRef },
    { type: MatMultiSort, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: ['C2_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },
    { type: FocusMonitor },
    { type: ElementRef }
];
MatMultiSortHeaderComponent.propDecorators = {
    id: [{ type: Input, args: ['mat-multi-sort-header',] }],
    __setIndicatorHintVisible: [{ type: HostListener, args: ['mouseenter', ['true'],] }, { type: HostListener, args: ['longpress', ['true'],] }, { type: HostListener, args: ['mouseleave', ['false'],] }],
    _getAriaSortAttribute: [{ type: HostBinding, args: ['attr.aria-sort',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LW11bHRpLXNvcnQtaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9tYXQtbXVsdGktc29ydC9zcmMvIiwic291cmNlcyI6WyJsaWIvbWF0LW11bHRpLXNvcnQtaGVhZGVyL21hdC1tdWx0aS1zb3J0LWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDUixNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsdUJBQXVCLEVBQ3ZCLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQXVCakQsTUFBTSxPQUFPLDJCQUE0QixTQUFRLGFBQWE7SUFJNUQsWUFBbUIsS0FBd0IsRUFDekMsaUJBQW9DLEVBQ2pCLEtBQW1CLEVBQ2tCLFVBQW9DLEVBQzVGLGFBQTJCLEVBQzNCLFdBQW9DO1FBQ3BDLEtBQUssQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFOOUQsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFFdEIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNrQixlQUFVLEdBQVYsVUFBVSxDQUEwQjtRQU45RixVQUFLLEdBQUcsS0FBdUIsQ0FBQztJQVVoQyxDQUFDO0lBS0QseUJBQXlCLENBQUMsT0FBeUI7UUFDakQsS0FBSyxDQUFDLHdCQUF3QixDQUFDLE9BQWtCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9DLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHFCQUFxQjtRQUNuQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFHRCxxQkFBcUI7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekUsQ0FBQzs7O1lBdEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QiwrOENBQXFEO2dCQUVyRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFVBQVUsRUFBRTtvQkFDVixpQkFBaUIsQ0FBQyxTQUFTO29CQUMzQixpQkFBaUIsQ0FBQyxXQUFXO29CQUM3QixpQkFBaUIsQ0FBQyxZQUFZO29CQUM5QixpQkFBaUIsQ0FBQyxZQUFZO29CQUM5QixpQkFBaUIsQ0FBQyxhQUFhO29CQUMvQixpQkFBaUIsQ0FBQyxhQUFhO2lCQUNoQzs7YUFDRjs7O1lBeEIwQyxpQkFBaUI7WUFUMUQsaUJBQWlCO1lBVVYsWUFBWSx1QkE4QmhCLFFBQVE7NENBQ1IsTUFBTSxTQUFDLDJCQUEyQixjQUFHLFFBQVE7WUE5QnpDLFlBQVk7WUFKbkIsVUFBVTs7O2lCQTZCVCxLQUFLLFNBQUMsdUJBQXVCO3dDQVc3QixZQUFZLFNBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQ25DLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FDbEMsWUFBWSxTQUFDLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQztvQ0FzQnBDLFdBQVcsU0FBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBPcHRpb25hbCxcclxuICBJbmplY3QsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIEVsZW1lbnRSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbWF0U29ydEFuaW1hdGlvbnMsIE1hdFNvcnRIZWFkZXIsIE1hdFNvcnRIZWFkZXJJbnRsIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc29ydCc7XHJcbmltcG9ydCB7IE1hdE11bHRpU29ydCB9IGZyb20gJy4uL21hdC1tdWx0aS1zb3J0LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZvY3VzTW9uaXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcclxuXHJcbi8qKiBDb2x1bW4gZGVmaW5pdGlvbiBhc3NvY2lhdGVkIHdpdGggYSBgTWF0U29ydEhlYWRlcmAuICovXHJcbmludGVyZmFjZSBDMk1hdFNvcnRIZWFkZXJDb2x1bW5EZWYge1xyXG4gIG5hbWU6IHN0cmluZztcclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdbbWF0LW11bHRpLXNvcnQtaGVhZGVyXScsXHJcbiAgZXhwb3J0QXM6ICdtYXRNdWx0aVNvcnRIZWFkZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXQtbXVsdGktc29ydC1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL21hdC1tdWx0aS1zb3J0LWhlYWRlci5jb21wb25lbnQuc2NzcyddLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgYW5pbWF0aW9uczogW1xyXG4gICAgbWF0U29ydEFuaW1hdGlvbnMuaW5kaWNhdG9yLFxyXG4gICAgbWF0U29ydEFuaW1hdGlvbnMubGVmdFBvaW50ZXIsXHJcbiAgICBtYXRTb3J0QW5pbWF0aW9ucy5yaWdodFBvaW50ZXIsXHJcbiAgICBtYXRTb3J0QW5pbWF0aW9ucy5hcnJvd09wYWNpdHksXHJcbiAgICBtYXRTb3J0QW5pbWF0aW9ucy5hcnJvd1Bvc2l0aW9uLFxyXG4gICAgbWF0U29ydEFuaW1hdGlvbnMuYWxsb3dDaGlsZHJlblxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdE11bHRpU29ydEhlYWRlckNvbXBvbmVudCBleHRlbmRzIE1hdFNvcnRIZWFkZXIge1xyXG4gIHN0YXJ0ID0gJ2FzYycgYXMgJ2FzYycgfCAnZGVzYyc7XHJcbiAgQElucHV0KCdtYXQtbXVsdGktc29ydC1oZWFkZXInKSBpZDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgX2ludGw6IE1hdFNvcnRIZWFkZXJJbnRsLFxyXG4gICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIF9zb3J0OiBNYXRNdWx0aVNvcnQsXHJcbiAgICBASW5qZWN0KCdDMl9TT1JUX0hFQURFUl9DT0xVTU5fREVGJykgQE9wdGlvbmFsKCkgcHVibGljIF9jb2x1bW5EZWY6IEMyTWF0U29ydEhlYWRlckNvbHVtbkRlZixcclxuICAgIF9mb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvcixcclxuICAgIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge1xyXG4gICAgc3VwZXIoX2ludGwsIGNoYW5nZURldGVjdG9yUmVmLCBfc29ydCwgX2NvbHVtbkRlZiwgX2ZvY3VzTW9uaXRvciwgX2VsZW1lbnRSZWYpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicsIFsndHJ1ZSddKVxyXG4gIEBIb3N0TGlzdGVuZXIoJ2xvbmdwcmVzcycsIFsndHJ1ZSddKVxyXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBbJ2ZhbHNlJ10pXHJcbiAgX19zZXRJbmRpY2F0b3JIaW50VmlzaWJsZSh2aXNpYmxlOiBzdHJpbmcgfCBib29sZWFuKSB7XHJcbiAgICBzdXBlci5fc2V0SW5kaWNhdG9ySGludFZpc2libGUodmlzaWJsZSBhcyBib29sZWFuKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVDbGljaygpIHtcclxuICAgIHRoaXMuX3NvcnQuZGlyZWN0aW9uID0gdGhpcy5nZXRTb3J0RGlyZWN0aW9uKCk7XHJcbiAgICBzdXBlci5faGFuZGxlQ2xpY2soKTtcclxuICB9XHJcblxyXG4gIF9pc1NvcnRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9zb3J0LmFjdGl2ZXMuZmluZEluZGV4KGFjdGl2ZUlkID0+IGFjdGl2ZUlkID09PSB0aGlzLmlkKSA+IC0xO1xyXG4gIH1cclxuXHJcbiAgX3NvcnRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9zb3J0LmFjdGl2ZXMuZmluZEluZGV4KGFjdGl2ZUlkID0+IGFjdGl2ZUlkID09PSB0aGlzLmlkKSArIDE7XHJcbiAgfVxyXG5cclxuICBfdXBkYXRlQXJyb3dEaXJlY3Rpb24oKSB7XHJcbiAgICB0aGlzLl9hcnJvd0RpcmVjdGlvbiA9IHRoaXMuZ2V0U29ydERpcmVjdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtc29ydCcpXHJcbiAgX2dldEFyaWFTb3J0QXR0cmlidXRlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9pc1NvcnRlZCgpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmdldFNvcnREaXJlY3Rpb24oKSA9PT0gJ2FzYycgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcclxuICB9XHJcblxyXG4gIF9yZW5kZXJBcnJvdygpIHtcclxuICAgIHJldHVybiAhdGhpcy5faXNEaXNhYmxlZCgpIHx8IHRoaXMuX2lzU29ydGVkKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTb3J0RGlyZWN0aW9uKCk6ICdhc2MnIHwgJ2Rlc2MnIHwgJycge1xyXG4gICAgY29uc3QgaSA9IHRoaXMuX3NvcnQuYWN0aXZlcy5maW5kSW5kZXgoYWN0aXZlSWRzID0+IGFjdGl2ZUlkcyA9PT0gdGhpcy5pZCk7XHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl9zb3J0LmRpcmVjdGlvbnNbaV07XHJcbiAgICByZXR1cm4gdGhpcy5faXNTb3J0ZWQoKSA/IGRpcmVjdGlvbiA6ICh0aGlzLnN0YXJ0IHx8IHRoaXMuX3NvcnQuc3RhcnQpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19