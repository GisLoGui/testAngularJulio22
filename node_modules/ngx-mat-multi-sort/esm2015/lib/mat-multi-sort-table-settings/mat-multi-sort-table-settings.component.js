import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { TableData } from '../table-data';
import { MatDialog } from '@angular/material/dialog';
import { MatMultiSortColumnDialogComponent } from '../mat-multi-sort-column-dialog/mat-multi-sort-column-dialog.component';
import { finalize } from 'rxjs/operators';
export class MatMultiSortTableSettingsComponent {
    constructor(dialog) {
        this.dialog = dialog;
        this.sort = [];
        this.closeDialogOnChoice = true;
    }
    set tableData(tableData) {
        this._tableData = tableData;
    }
    ngOnInit() {
        this.sort = this.getSort();
        this._tableData.sortObservable.subscribe(() => this.sort = this.getSort());
        this._tableData.onColumnsChange().subscribe(() => this.sort = this.getSort());
    }
    openDialog() {
        if (this.dialogRef) {
            return;
        }
        const button = this.buttonRef.nativeElement;
        const posRight = window.innerWidth - (button.offsetLeft + button.offsetWidth + 16);
        const posTop = button.offsetTop + button.offsetHeight;
        this.dialogRef = this.dialog.open(MatMultiSortColumnDialogComponent, {
            backdropClass: 'cdk-overlay-transparent-backdrop',
            panelClass: 'column-dialog',
            position: { right: `${posRight}px`, top: `${posTop}px` },
            data: { tableData: this._tableData, sort: this.sort, closeOnChoice: this.closeDialogOnChoice }
        });
        this.dialogRef.backdropClick().subscribe(() => this.dialogRef.close());
        this.dialogRef.afterClosed().pipe(finalize(() => this.dialogRef = null)).subscribe();
    }
    dropSort(event) {
        moveItemInArray(this.sort, event.previousIndex, event.currentIndex);
        this.updateSort();
    }
    getSort() {
        const sorting = [];
        for (let i = 0; i < this._tableData.sortParams.length; i++) {
            sorting.push({
                id: this._tableData.sortParams[i],
                name: this._tableData.columns.find(c => c.id === this._tableData.sortParams[i]).name,
                direction: this._tableData.sortDirs[i]
            });
        }
        return sorting;
    }
    remove(id) {
        this.sort = this.sort.filter(v => v.id !== id);
        this.updateSort();
    }
    updateDirection(id) {
        const i = this.sort.findIndex(v => v.id === id);
        if (this.sort[i].direction === 'asc') {
            this.sort[i].direction = 'desc';
        }
        else {
            this.sort[i].direction = 'asc';
        }
        this.updateSort();
    }
    updateSort() {
        this._tableData.sortParams = this.sort.map(v => v.id);
        this._tableData.sortDirs = this.sort.map(v => v.direction);
        this._tableData.updateSortHeaders();
    }
}
MatMultiSortTableSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-multi-sort-table-settings',
                template: "<div class=\"table-settings\">\r\n    <div class=\"table-settings-sort\">\r\n        <mat-chip-list class=\"drag-chip-list\" cdkDropList cdkDropListOrientation='horizontal'\r\n            (cdkDropListDropped)=\"dropSort($event)\">\r\n            <mat-chip class=\"drag-chip\" *ngFor=\"let item of sort\" cdkDrag (removed)=\"remove(item.id)\"\r\n                (click)=\"updateDirection(item.id)\">\r\n                {{item.name}}:\r\n                <div class=\"sorting\" [matTooltip]=\"sortToolTip\">\r\n                    {{item.direction}}\r\n                </div>\r\n                <mat-icon matChipRemove>cancel</mat-icon>\r\n            </mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <div style=\"flex: 1 1 auto;\"></div>\r\n    <div #settingsMenu (click)=\"openDialog()\" class=\"table-settings-menu\">\r\n        <ng-content #menuRef></ng-content>\r\n    </div>\r\n</div>\r\n",
                styles: [".table-settings{display:flex}.table-settings .table-settings-menu{margin:8px 16px}.table-settings-sort{margin:auto 0}.sorting{color:#757575;display:inline-block;margin:0 6px}.sorting:hover{cursor:pointer}.drag-chip{background-color:#fff;border:1px solid rgba(0,0,0,.12)}.drag-chip:hover{background-color:#fff;cursor:move}.drag-chip:focus:after,.drag-chip:hover:after{opacity:0}.drag-chip-list.cdk-drop-list-dragging .drag-chip:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
            },] }
];
MatMultiSortTableSettingsComponent.ctorParameters = () => [
    { type: MatDialog }
];
MatMultiSortTableSettingsComponent.propDecorators = {
    buttonRef: [{ type: ViewChild, args: ['settingsMenu',] }],
    sortToolTip: [{ type: Input }],
    closeDialogOnChoice: [{ type: Input }],
    tableData: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,