{"version":3,"file":"mat-table-filter.js.map","sources":["ng://mat-table-filter/lib/deep-diff.service.ts","ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts"],"sourcesContent":["import { Injectable, KeyValueDiffers, KeyValueDiffer } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeepDiffService {\n\n\n  constructor() { }\n\n  public isDifferent(oldObject: any, newObject: any): boolean {\n    if (!oldObject && newObject) {\n      return true;\n    }\n    for (const key in oldObject) {\n      if (oldObject.hasOwnProperty(key)) {\n        const oldValue = oldObject[key];\n        const newValue = newObject[key];\n        if (typeof oldValue === 'string' || typeof oldValue === 'number') {\n          if (oldValue !== newValue) {\n            return true;\n          }\n        } else if (typeof oldValue === 'object') {\n          const result = this.isDifferent(oldValue, newValue);\n          if (result) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n\n\n}\n","export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { Injectable } from '@angular/core';\nimport { MatTableFilter } from './mat-table-filter.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor() {}\n\n  public filterPredicate(exampleEntity: any, item: any, filterType: MatTableFilter, caseSensitive: boolean): boolean {\n    const exampleEntityObjectKeys = Object.keys(exampleEntity);\n    for (let i = 0; i < exampleEntityObjectKeys.length; i++) {\n      const exampleColumn = exampleEntityObjectKeys[i];\n      const exampleColumnValue = exampleEntity[exampleColumn];\n      const itemColumnValue = item[exampleColumn];\n      if (!exampleColumnValue || exampleColumnValue instanceof Array) {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        // also if there is an array property we are skipping\n        continue;\n      }\n      if (itemColumnValue) {\n        // if example entity has additional columns then search fails\n        if (this.isAlphaNumeric(itemColumnValue)) {\n          if (!this.filterPredicateAlphaNumeric(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            return false;\n          }\n        } else if (this.isBoolean(itemColumnValue)) {\n          if (itemColumnValue !== exampleColumnValue) {\n            return false;\n          }\n        } else {\n          if (!this.filterPredicate(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n            // however if it returns false then the item must not be in the list\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private filterPredicateAlphaNumeric(\n    exampleColumnValue: number | string,\n    itemColumnValue: number | string,\n    filterType: MatTableFilter,\n    caseSensitive: boolean\n  ): boolean {\n    let exampleString = exampleColumnValue.toString();\n    let itemString = itemColumnValue.toString();\n    if (!caseSensitive) {\n      exampleString = exampleString.toUpperCase();\n      itemString = itemString.toUpperCase();\n    }\n    let result = true;\n    switch (filterType) {\n      case MatTableFilter.EQUALS:\n        if (exampleColumnValue !== itemColumnValue) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ANYWHERE:\n        if (!itemString.includes(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.STARTS_WITH:\n        if (!itemString.startsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ENDS_WITH:\n        if (!itemString.endsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  private isAlphaNumeric(value: any) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  private isBoolean(value: any) {\n    return typeof value === 'boolean';\n  }\n}\n","import { Directive, DoCheck, Input } from '@angular/core';\nimport { MatTable, MatTableDataSource } from '@angular/material';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { DeepDiffService } from './deep-diff.service';\nimport { MatTableFilter } from './mat-table-filter.enum';\nimport { MatTableFilterService } from './mat-table-filter.service';\n\n@Directive({\n  selector: '[matTableFilter]'\n})\nexport class MatTableFilterDirective implements DoCheck {\n\n  private _oldExampleEntity: any;\n\n  private _exampleEntity: any;\n\n  @Input()\n  set exampleEntity(value: any) {\n    this._oldExampleEntity = this._exampleEntity;\n    this._exampleEntity = value;\n  }\n  /**\n   * in millis\n   */\n  @Input() debounceTime = 400;\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\n  @Input() matTableFilter: any;\n  @Input() caseSensitive = false;\n\n  private _exampleEntitySubject: BehaviorSubject<void>;\n\n\n  constructor(private filterService: MatTableFilterService, private _deepDiffService: DeepDiffService) {\n    this.initDebounceSubject();\n  }\n\n  ngDoCheck(): void {\n    if (this._deepDiffService.isDifferent(this._oldExampleEntity, this._exampleEntity)) {\n        this._exampleEntitySubject.next();\n    }\n  }\n\n  private initDebounceSubject() {\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\n    this._exampleEntitySubject.pipe(\n     debounceTime(this.debounceTime))\n     .subscribe(_ => {\n       this.updateFilterPredicate();\n     });\n  }\n\n  private updateFilterPredicate() {\n    const matDataSource = this.getMatDataSource();\n    if (matDataSource) {\n      const _this = this;\n      matDataSource.filterPredicate = (data): boolean => {\n        return _this.filterService.filterPredicate(_this._exampleEntity, data, _this.filterType, _this.caseSensitive);\n      }\n      matDataSource.filter = this._exampleEntity as any;\n    }\n\n  }\n\n  private getMatDataSource(): MatTableDataSource<any> {\n    const matTable = this.matTableFilter as MatTable<any>;\n    if (matTable.dataSource && !(matTable.dataSource instanceof MatTableDataSource)) {\n      throw new Error('Use MatTableDataSource, example: dataSource = new MatTableDataSource(dataArray)');\n    }\n    return (matTable.dataSource as MatTableDataSource<any>);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n"],"names":[],"mappings":"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"}
