{"version":3,"sources":["ng://mat-table-filter/lib/deep-diff.service.ts","ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts"],"names":["DeepDiffService","prototype","isDifferent","oldObject","newObject","key","hasOwnProperty","oldValue","newValue","this","Injectable","args","providedIn","EQUALS","ANYWHERE","STARTS_WITH","ENDS_WITH","MatTableFilterService","filterPredicate","exampleEntity","item","filterType","caseSensitive","exampleEntityObjectKeys","Object","keys","i","length","exampleColumn","exampleColumnValue","itemColumnValue","Array","isAlphaNumeric","filterPredicateAlphaNumeric","isBoolean","exampleString","toString","itemString","toUpperCase","result","MatTableFilter","includes","startsWith","endsWith","value","MatTableFilterDirective","filterService","_deepDiffService","debounceTime","initDebounceSubject","defineProperty","_oldExampleEntity","_exampleEntity","ngDoCheck","_exampleEntitySubject","next","_this_1","BehaviorSubject","pipe","subscribe","_","updateFilterPredicate","matDataSource","getMatDataSource","_this_2","data","filter","matTable","dataSource","MatTableDataSource","Error","Directive","selector","Input","MatTableFilterModule","NgModule","declarations","imports","MatTableModule","exports"],"mappings":"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","sourcesContent":["import { Injectable, KeyValueDiffers, KeyValueDiffer } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeepDiffService {\n\n\n  constructor() { }\n\n  public isDifferent(oldObject: any, newObject: any): boolean {\n    if (!oldObject && newObject) {\n      return true;\n    }\n    for (const key in oldObject) {\n      if (oldObject.hasOwnProperty(key)) {\n        const oldValue = oldObject[key];\n        const newValue = newObject[key];\n        if (typeof oldValue === 'string' || typeof oldValue === 'number') {\n          if (oldValue !== newValue) {\n            return true;\n          }\n        } else if (typeof oldValue === 'object') {\n          const result = this.isDifferent(oldValue, newValue);\n          if (result) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n\n\n}\n","export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { Injectable } from '@angular/core';\nimport { MatTableFilter } from './mat-table-filter.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor() {}\n\n  public filterPredicate(exampleEntity: any, item: any, filterType: MatTableFilter, caseSensitive: boolean): boolean {\n    const exampleEntityObjectKeys = Object.keys(exampleEntity);\n    for (let i = 0; i < exampleEntityObjectKeys.length; i++) {\n      const exampleColumn = exampleEntityObjectKeys[i];\n      const exampleColumnValue = exampleEntity[exampleColumn];\n      const itemColumnValue = item[exampleColumn];\n      if (!exampleColumnValue || exampleColumnValue instanceof Array) {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        // also if there is an array property we are skipping\n        continue;\n      }\n      if (itemColumnValue) {\n        // if example entity has additional columns then search fails\n        if (this.isAlphaNumeric(itemColumnValue)) {\n          if (!this.filterPredicateAlphaNumeric(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            return false;\n          }\n        } else if (this.isBoolean(itemColumnValue)) {\n          if (itemColumnValue !== exampleColumnValue) {\n            return false;\n          }\n        } else {\n          if (!this.filterPredicate(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n            // however if it returns false then the item must not be in the list\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private filterPredicateAlphaNumeric(\n    exampleColumnValue: number | string,\n    itemColumnValue: number | string,\n    filterType: MatTableFilter,\n    caseSensitive: boolean\n  ): boolean {\n    let exampleString = exampleColumnValue.toString();\n    let itemString = itemColumnValue.toString();\n    if (!caseSensitive) {\n      exampleString = exampleString.toUpperCase();\n      itemString = itemString.toUpperCase();\n    }\n    let result = true;\n    switch (filterType) {\n      case MatTableFilter.EQUALS:\n        if (exampleColumnValue !== itemColumnValue) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ANYWHERE:\n        if (!itemString.includes(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.STARTS_WITH:\n        if (!itemString.startsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ENDS_WITH:\n        if (!itemString.endsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  private isAlphaNumeric(value: any) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  private isBoolean(value: any) {\n    return typeof value === 'boolean';\n  }\n}\n","import { Directive, DoCheck, Input } from '@angular/core';\nimport { MatTable, MatTableDataSource } from '@angular/material';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { DeepDiffService } from './deep-diff.service';\nimport { MatTableFilter } from './mat-table-filter.enum';\nimport { MatTableFilterService } from './mat-table-filter.service';\n\n@Directive({\n  selector: '[matTableFilter]'\n})\nexport class MatTableFilterDirective implements DoCheck {\n\n  private _oldExampleEntity: any;\n\n  private _exampleEntity: any;\n\n  @Input()\n  set exampleEntity(value: any) {\n    this._oldExampleEntity = this._exampleEntity;\n    this._exampleEntity = value;\n  }\n  /**\n   * in millis\n   */\n  @Input() debounceTime = 400;\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\n  @Input() matTableFilter: any;\n  @Input() caseSensitive = false;\n\n  private _exampleEntitySubject: BehaviorSubject<void>;\n\n\n  constructor(private filterService: MatTableFilterService, private _deepDiffService: DeepDiffService) {\n    this.initDebounceSubject();\n  }\n\n  ngDoCheck(): void {\n    if (this._deepDiffService.isDifferent(this._oldExampleEntity, this._exampleEntity)) {\n        this._exampleEntitySubject.next();\n    }\n  }\n\n  private initDebounceSubject() {\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\n    this._exampleEntitySubject.pipe(\n     debounceTime(this.debounceTime))\n     .subscribe(_ => {\n       this.updateFilterPredicate();\n     });\n  }\n\n  private updateFilterPredicate() {\n    const matDataSource = this.getMatDataSource();\n    if (matDataSource) {\n      const _this = this;\n      matDataSource.filterPredicate = (data): boolean => {\n        return _this.filterService.filterPredicate(_this._exampleEntity, data, _this.filterType, _this.caseSensitive);\n      }\n      matDataSource.filter = this._exampleEntity as any;\n    }\n\n  }\n\n  private getMatDataSource(): MatTableDataSource<any> {\n    const matTable = this.matTableFilter as MatTable<any>;\n    if (matTable.dataSource && !(matTable.dataSource instanceof MatTableDataSource)) {\n      throw new Error('Use MatTableDataSource, example: dataSource = new MatTableDataSource(dataArray)');\n    }\n    return (matTable.dataSource as MatTableDataSource<any>);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n"]}